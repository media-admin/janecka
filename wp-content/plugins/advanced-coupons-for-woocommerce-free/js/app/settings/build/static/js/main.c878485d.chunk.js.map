{"version":3,"sources":["store/actions/section.ts","store/actions/setting.ts","store/reducers/section.ts","store/actions/page.ts","store/reducers/setting.ts","store/reducers/page.ts","helpers/axios.ts","store/sagas/section.ts","store/sagas/setting.ts","store/sagas/index.ts","store/index.ts","components/SettingsNav/icons.tsx","helpers/utils.ts","components/SettingsNav/index.tsx","components/UpsellProvider/index.tsx","components/SettingsForm/SettingField/PremiumModule.tsx","components/SettingsForm/SettingField/InputSwitch.tsx","components/SettingsForm/SettingField/index.tsx","components/FreeGuide/index.tsx","components/SettingsForm/index.tsx","components/Logo/index.tsx","pages/Settings/index.tsx","pages/License/index.tsx","pages/About/index.tsx","pages/Premium/index.tsx","pages/Help/index.tsx","pages/App.tsx","components/CouponsNav/index.tsx","index.tsx"],"names":["ESectionActionTypes","ESettingActionTypes","SectionActions","payload","type","READ_SECTIONS","READ_SECTION","SET_STORE_SECTIONS","SET_STORE_SECTION","TOGGLE_MODULE_SECTION","sections","action","data","idx","findIndex","i","id","clonedSections","cloneDeep","module","show","EPageActionTypes","SettingActions","UPDATE_SETTING","REHYDRATE_STORE_SETTINGS","REHYDRATE_STORE_SETTING","SET_STORE_SETTINGS","SET_STORE_SETTING","settings","clonedSettings","value","push","PageActions","setStorePage","SET_STORE_PAGE","page","axios","create","baseURL","wpApiSettings","root","timeout","headers","nonce","readSectionsSaga","readSectionSaga","processingCB","successCB","failCB","section","axiosInstance","defaults","call","get","response","put","error","actionListener","takeEvery","createSettingSaga","updateSettingSaga","deleteSettingSaga","readSettingSaga","rehydrateStoreSettingsSaga","rehydrateStoreSettingSaga","post","Error","updateData","delete","values","fields","filter","f","map","CREATE_SETTING","DELETE_SETTING","READ_SETTINGS","rootSaga","all","setting","bindMiddleware","middlewares","composeWithDevTools","require","applyMiddleware","MenuIcon","props","ControlOutlined","SettingOutlined","TagsOutlined","ScheduleOutlined","UserOutlined","LinkOutlined","MedicineBoxOutlined","ApiOutlined","StarOutlined","RocketOutlined","getPathPrefix","acfwAdminApp","admin_url","replace","location","origin","validateURL","str","RegExp","test","pathPrefix","connect","store","dispatch","actions","bindActionCreators","currentSection","app_pages","defaultKey","history","useHistory","length","className","active","paragraph","filteredSections","defaultSelectedKeys","title","Item","to","slug","label","onClick","UpsellContext","createContext","showModal","setShowModal","UpsellModal","content","buttonTxt","centered","width","visible","onCancel","footer","LockFilled","text","UpsellProvider","children","useState","Provider","upsellModal","PremiumModule","field","context","useContext","checked","defaultChecked","onChange","updateSetting","setStoreSettingItem","action_notices","index","settingValues","setShowSpinner","validateInput","savedValue","placeholder","defaultValue","default","saveTimeout","setSaveTimeout","undefined","handleValueChange","inputValue","needTimeout","updateValue","message","success","fail","clearTimeout","setTimeout","TextArea","rows","event","target","options","toString","style","onSelect","inputvalue","key","Option","indexOf","name","licenseContent","dangerouslySetInnerHTML","__html","Text","Typography","SettingField","desc","desc_tip","validation","showSpinner","invalidInput","setInvalidInput","tooltip","noticeData","classname","noticeTitle","description","button_text","button_link","button_class","href","rel","gutter","span","placement","trigger","QuestionCircleOutlined","indicator","LoadingOutlined","fontSize","spin","FreeGuide","showSubtitle","showTag","free_guide","tag","subtitle","image","button","list","color","src","alt","list_text","BulbFilled","help_link","link","size","defaultProps","sectionID","sectionFields","loading","p","premiumPage","logo","readSections","readSection","URLSearchParams","useLocation","search","useEffect","License","license_page","feature_comparison","license_status","specs","s","About","about_page","main_card","cards","status","status_texts","button_texts","card","external","Meta","avatar","icon","Link","Premium","premium_page","header","logo_alt","feature","free","premium","btn_link","btn_text","Help","help_page","HelpPremium","acfwpElements","LicensePremium","is_acfwp_active","parseInt","appPage","coupon_nav","toplevel","links","initialState","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","sectionsReducer","settingsReducer","pageReducer","run","initializeStore","exports","element","React","dom","ReactDOM","router","BrowserRouter","Route","Redirect","redux","sagaEffects","lodash","antd","antdIcons","moment","appStore","storeActions","document","querySelectorAll","forEach","domContainer","render","path","component","App","CouponsNav"],"mappings":"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","file":"static/js/main.c878485d.chunk.js","sourcesContent":["// #region [Imports] ===================================================================================================\n\n// Types\nimport { ISection } from \"../../types/section\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface IReadSectionsActionPayload {\n  id?: string | null;\n  processingCB?: () => void;\n  successCB?: (arg: any) => void;\n  failCB?: (arg: any) => void;\n}\n\nexport interface IReadSectionActionPayload {\n  id: string | null;\n  processingCB?: () => void;\n  successCB?: (arg: any) => void;\n  failCB?: (arg: any) => void;\n}\n\nexport interface ISetStoreSectionsActionPayload {\n  data: ISection[];\n}\n\nexport interface ISetStoreSectionActionPayload {\n  data: ISection;\n}\n\nexport interface IToggleModuleSectionActionPayload {\n  module: string;\n  show: boolean;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum ESectionActionTypes {\n  READ_SECTIONS = \"READ_SECTIONS\",\n  READ_SECTION = \"READ_SECTION\",\n  SET_STORE_SECTIONS = \"SET_STORE_SECTIONS\",\n  SET_STORE_SECTION = \"SET_STORE_SECTION\",\n  TOGGLE_MODULE_SECTION = \"TOGGLE_MODULE_SECTION\",\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const SectionActions = {\n  readSections: (payload: IReadSectionsActionPayload) => ({\n    type: ESectionActionTypes.READ_SECTIONS,\n    payload,\n  }),\n  readSection: (payload: IReadSectionActionPayload) => ({\n    type: ESectionActionTypes.READ_SECTION,\n    payload,\n  }),\n  setStoreSectionItems: (payload: ISetStoreSectionsActionPayload) => ({\n    type: ESectionActionTypes.SET_STORE_SECTIONS,\n    payload,\n  }),\n  setStoreSectionItem: (payload: ISetStoreSectionActionPayload) => ({\n    type: ESectionActionTypes.SET_STORE_SECTION,\n    payload,\n  }),\n  toggleModuleSection: (payload: IToggleModuleSectionActionPayload) => ({\n    type: ESectionActionTypes.TOGGLE_MODULE_SECTION,\n    payload,\n  }),\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\nimport { ISection } from \"../../types/section\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface ICreateSettingActionPayload {\n    data: ISettingValue,\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IUpdateSettingActionPayload {\n    data: ISettingValue;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IDeleteSettingActionPayload {\n    id: string;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IReadSettingsActionPayload {\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IRehydrateStoreSettingsActionPayload {\n    data?: ISection;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IRehydrateStoreSettingActionPayload {\n    id: string;\n    data?: ISettingValue;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface ISetStoreSettingsActionPayload {\n    data: ISettingValue[];\n}\n\nexport interface ISetStoreSettingActionPayload {\n    data: ISettingValue;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum ESettingActionTypes {\n    CREATE_SETTING = \"CREATE_SETTING\",\n    UPDATE_SETTING = \"UPDATE_SETTING\",\n    DELETE_SETTING = \"DELETE_SETTING\",\n    READ_SETTINGS = \"READ_SETTINGS\",\n    REHYDRATE_STORE_SETTINGS = \"REHYDRATE_STORE_SETTINGS\",\n    REHYDRATE_STORE_SETTING = \"REHYDRATE_STORE_SETTING\",\n    SET_STORE_SETTINGS = \"SET_STORE_SETTINGS\",\n    SET_STORE_SETTING = \"SET_STORE_SETTING\"\n}\n\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const SettingActions = {\n    createSetting: (payload: ICreateSettingActionPayload) => ({\n        type: ESettingActionTypes.CREATE_SETTING,\n        payload\n    }),\n    updateSetting: (payload: IUpdateSettingActionPayload) => ({\n        type: ESettingActionTypes.UPDATE_SETTING,\n        payload\n    }),\n    deleteSetting: (payload: IDeleteSettingActionPayload) => ({\n        type: ESettingActionTypes.DELETE_SETTING,\n        payload\n    }),\n    readSettings: (payload: IReadSettingsActionPayload) => ({\n        type: ESettingActionTypes.READ_SETTINGS,\n        payload\n    }),\n    rehydrateStoreSettings: (payload: IRehydrateStoreSettingsActionPayload) => ({\n        type: ESettingActionTypes.REHYDRATE_STORE_SETTINGS,\n        payload\n    }),\n    rehydrateStoreSetting: (payload: IRehydrateStoreSettingActionPayload) => ({\n        type: ESettingActionTypes.REHYDRATE_STORE_SETTING,\n        payload\n    }),\n    setStoreSettingItems: (payload: ISetStoreSettingsActionPayload) => ({\n        type: ESettingActionTypes.SET_STORE_SETTINGS,\n        payload\n    }),\n    setStoreSettingItem: (payload: ISetStoreSettingActionPayload) => ({\n        type: ESettingActionTypes.SET_STORE_SETTING,\n        payload\n    })\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport { ISection } from \"../../types/section\";\n\n// Actions\nimport {\n  ISetStoreSectionsActionPayload,\n  ISetStoreSectionActionPayload,\n  IToggleModuleSectionActionPayload,\n  ESectionActionTypes,\n} from \"../actions/section\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n  sections: ISection[] = [],\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ESectionActionTypes.SET_STORE_SECTIONS: {\n      const { data } = action.payload as ISetStoreSectionsActionPayload;\n      return data;\n    }\n\n    case ESectionActionTypes.SET_STORE_SECTION: {\n      const { data } = action.payload as ISetStoreSectionActionPayload;\n      const idx = sections.findIndex((i) => i.id === data.id);\n\n      if (idx < 0) return sections;\n\n      const clonedSections = cloneDeep(sections);\n\n      clonedSections[idx] = { ...clonedSections[idx], ...data };\n\n      return clonedSections;\n    }\n\n    case ESectionActionTypes.TOGGLE_MODULE_SECTION: {\n      const {\n        module,\n        show,\n      } = action.payload as IToggleModuleSectionActionPayload;\n      const idx = sections.findIndex((i) => i.module && i.module === module);\n\n      if (idx < 0) return sections;\n\n      const clonedSections = cloneDeep(sections);\n\n      clonedSections[idx].show = show;\n\n      return clonedSections;\n    }\n\n    default:\n      return sections;\n  }\n};\n\n// #endregion [Reducer]\n","// #region [Action Payloads] ===========================================================================================\n\nexport interface ISetStorePageActionPayload {\n    data: string;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum EPageActionTypes {\n    SET_STORE_PAGE = \"SET_STORE_PAGE\"\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const PageActions = {\n    setStorePage: (payload: ISetStorePageActionPayload) => ({\n        type: EPageActionTypes.SET_STORE_PAGE,\n        payload\n    })\n};\n\n// #endregion [Action Creators]","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\n\n// Actions\nimport {\n  ISetStoreSettingsActionPayload,\n  ISetStoreSettingActionPayload,\n  ESettingActionTypes,\n} from \"../actions/setting\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n  settings: ISettingValue[] = [],\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ESettingActionTypes.SET_STORE_SETTINGS: {\n      const { data } = action.payload as ISetStoreSettingsActionPayload;\n      let clonedSettings = cloneDeep(settings);\n\n      for (const value of data) {\n        let idx = settings.findIndex((i) => i.id === value.id);\n        if (clonedSettings[idx]) clonedSettings[idx] = value;\n        else clonedSettings.push(value);\n      }\n\n      return clonedSettings;\n    }\n\n    case ESettingActionTypes.SET_STORE_SETTING: {\n      const { data } = action.payload as ISetStoreSettingActionPayload;\n      const idx = settings.findIndex((i) => i.id === data.id);\n\n      if (idx < 0) return settings;\n\n      const clonedSettings = cloneDeep(settings);\n\n      clonedSettings[idx] = { ...clonedSettings[idx], ...data };\n\n      return clonedSettings;\n    }\n\n    default:\n      return settings;\n  }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===================================================================================================\n\n// Actions\nimport {\n    ISetStorePageActionPayload,\n    EPageActionTypes\n} from \"../actions/page\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    page: string = '',\n    action: { type: string; payload: any }\n) => {\n\n    switch (action.type) {\n\n        case EPageActionTypes.SET_STORE_PAGE: {\n            const { data } = action.payload as ISetStorePageActionPayload;\n            return data;\n        }\n\n        default:\n            return page;\n    }\n};\n\n// #endregion [Reducer]\n","declare var axios: any;\ndeclare var wpApiSettings: any;\n\n// #endregion [Variables]\n\nexport default axios.create({\n  baseURL: wpApiSettings.root,\n  timeout: 30000,\n  headers: { \"X-WP-Nonce\": wpApiSettings.nonce },\n});\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Actions\nimport {\n  IReadSectionsActionPayload,\n  IReadSectionActionPayload,\n  ESectionActionTypes,\n  SectionActions,\n} from \"../actions/section\";\nimport { SettingActions } from \"../actions/setting\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* readSectionsSaga(action: {\n  type: string;\n  payload: IReadSectionsActionPayload;\n}): any {\n  const { id, processingCB, successCB, failCB } = action.payload;\n  const section = id ? id : \"general_section\";\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    axiosInstance.defaults.headers[\"section\"] = section;\n\n    const response = yield call(() =>\n      axiosInstance.get(`coupons/v1/settings/sections`)\n    );\n\n    if (response && response.data) {\n      const idx = section\n        ? response.data.findIndex((i: any) => i.id === section)\n        : 0;\n\n      yield put(\n        SettingActions.rehydrateStoreSettings({ data: response.data[idx] })\n      );\n\n      yield put(SectionActions.setStoreSectionItems({ data: response.data }));\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\nexport function* readSectionSaga(action: {\n  type: string;\n  payload: IReadSectionActionPayload;\n}): any {\n  const { id, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    const section = id ? id : \"general_section\";\n\n    const response = yield call(() =>\n      axiosInstance.get(`coupons/v1/settings/sections/${section}`)\n    );\n\n    if (response && response.data) {\n      yield put(SettingActions.rehydrateStoreSettings({ data: response.data }));\n\n      yield put(SectionActions.setStoreSectionItem({ data: response.data }));\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListener = [\n  takeEvery(ESectionActionTypes.READ_SECTIONS, readSectionsSaga),\n  takeEvery(ESectionActionTypes.READ_SECTION, readSectionSaga),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\n\n// Actions\nimport {\n  ICreateSettingActionPayload,\n  IUpdateSettingActionPayload,\n  IDeleteSettingActionPayload,\n  IReadSettingsActionPayload,\n  IRehydrateStoreSettingsActionPayload,\n  IRehydrateStoreSettingActionPayload,\n  ESettingActionTypes,\n  SettingActions,\n} from \"../actions/setting\";\nimport { SectionActions } from \"../actions/section\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* createSettingSaga(action: {\n  type: string;\n  payload: ICreateSettingActionPayload;\n}): any {\n  const { data, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    const response = yield call(() =>\n      axiosInstance.post(`coupons/v1/setting/sections`, data)\n    );\n\n    if (response && response.data) {\n      yield put(SettingActions.rehydrateStoreSettings({}));\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e, payload: data });\n  }\n}\n\nexport function* updateSettingSaga(action: {\n  type: string;\n  payload: IUpdateSettingActionPayload;\n}): any {\n  const { data, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    if (!data.id)\n      throw new Error(\"Can not update survey. No survey id provided.\");\n\n    const response = yield call(() => {\n      const { id, ...updateData } = data;\n\n      return axiosInstance.put(`coupons/v1/settings/${id}`, updateData);\n    });\n\n    if (response && response.data) {\n      yield put(\n        SettingActions.rehydrateStoreSetting({\n          id: response.data.id,\n          data: response.data,\n        })\n      );\n\n      // toggle module display in settings nav.\n      if (\"module\" === data.type) {\n        yield put(\n          SectionActions.toggleModuleSection({\n            module: data.id,\n            show: \"yes\" === data.value,\n          })\n        );\n      }\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e, payload: data });\n  }\n}\n\nexport function* deleteSettingSaga(action: {\n  type: string;\n  payload: IDeleteSettingActionPayload;\n}): any {\n  const { id, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    const response = yield call(() =>\n      axiosInstance.delete(`coupons/v1/settings/${id}`)\n    );\n\n    if (response && response.data) {\n      yield put(SettingActions.rehydrateStoreSettings({}));\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\nexport function* readSettingSaga(action: {\n  type: string;\n  payload: IReadSettingsActionPayload;\n}): any {\n  const { processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    const response = yield call(() =>\n      axiosInstance.get(`coupons/v1/settings/`)\n    );\n\n    if (response && response.data) {\n      yield put(SettingActions.rehydrateStoreSettings({ data: response.data }));\n\n      if (typeof successCB === \"function\") successCB(response);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\nexport function* rehydrateStoreSettingsSaga(action: {\n  type: string;\n  payload: IRehydrateStoreSettingsActionPayload;\n}): any {\n  const { data, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    if (data) {\n      let values: ISettingValue[] = data.fields.filter(\n        (f) => f.type !== \"title\" && f.type !== \"sectionend\"\n      );\n      values = values.map((f) => ({ id: f.id, value: f.value }));\n\n      yield put(SettingActions.setStoreSettingItems({ data: values }));\n\n      if (typeof successCB === \"function\") successCB(values);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\nexport function* rehydrateStoreSettingSaga(action: {\n  type: string;\n  payload: IRehydrateStoreSettingActionPayload;\n}): any {\n  const { id, data, processingCB, successCB, failCB } = action.payload;\n\n  try {\n    if (typeof processingCB === \"function\") processingCB();\n\n    if (!data) {\n      const response = yield call(() =>\n        axiosInstance.get(`coupons/v1/settings/${id}`)\n      );\n\n      if (response && response.data) {\n        yield put(SettingActions.setStoreSettingItem({ data: response.data }));\n\n        if (typeof successCB === \"function\") successCB(response);\n      }\n    } else {\n      yield put(SettingActions.setStoreSettingItem({ data }));\n\n      if (typeof successCB === \"function\") successCB(data);\n    }\n  } catch (e) {\n    if (typeof failCB === \"function\") failCB({ error: e });\n  }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListener = [\n  takeEvery(ESettingActionTypes.CREATE_SETTING, createSettingSaga),\n  takeEvery(ESettingActionTypes.UPDATE_SETTING, updateSettingSaga),\n  takeEvery(ESettingActionTypes.DELETE_SETTING, deleteSettingSaga),\n  takeEvery(ESettingActionTypes.READ_SETTINGS, readSettingSaga),\n  takeEvery(\n    ESettingActionTypes.REHYDRATE_STORE_SETTINGS,\n    rehydrateStoreSettingsSaga\n  ),\n  takeEvery(\n    ESettingActionTypes.REHYDRATE_STORE_SETTING,\n    rehydrateStoreSettingSaga\n  ),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { all } from \"redux-saga/effects\";\n\n// Sagas\nimport * as section from \"./section\";\nimport * as setting from \"./setting\";\n\n// #endregion [Imports]\n\n// #region [Root Saga] =================================================================================================\n\nexport default function* rootSaga() {\n    yield all([...section.actionListener, ...setting.actionListener]);\n}\n\n// #endregion [Root Saga]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\n// Types\nimport { IStore } from \"../types/store\";\n\n// Reducers\nimport sectionsReducer from \"./reducers/section\";\nimport settingsReducer from \"./reducers/setting\";\nimport pageReducer from \"./reducers/page\";\n\n// Saga\nimport rootSaga from \"./sagas\";\n\n// #endregion [Imports]\n\n// #region [Store] =====================================================================================================\n\n/**\n * !Important\n * Comment this function out when releasing for production.\n */\nconst bindMiddleware = (middlewares: any[]) => {\n  const { composeWithDevTools } = require(\"redux-devtools-extension\");\n  return composeWithDevTools(applyMiddleware(...middlewares));\n};\n\nexport default function initializeStore(\n  initialState: IStore | undefined = undefined\n) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(\n    combineReducers({\n      sections: sectionsReducer,\n      settingValues: settingsReducer,\n      page: pageReducer,\n    }),\n    initialState,\n    bindMiddleware([sagaMiddleware])\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\n// #endregion [Store]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport {\n  ControlOutlined,\n  SettingOutlined,\n  TagsOutlined,\n  ScheduleOutlined,\n  UserOutlined,\n  LinkOutlined,\n  MedicineBoxOutlined,\n  ApiOutlined,\n  StarOutlined,\n  RocketOutlined,\n} from \"@ant-design/icons\";\n\n// #endregion [Imports]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n  section: string;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst MenuIcon = (props: any) => {\n  const { section } = props;\n\n  switch (section) {\n    case \"modules_section\":\n      return <ControlOutlined />;\n\n    case \"general_section\":\n      return <SettingOutlined />;\n\n    case \"bogo_deals_section\":\n      return <TagsOutlined />;\n\n    case \"scheduler_section\":\n      return <ScheduleOutlined />;\n\n    case \"role_restrictions_section\":\n      return <UserOutlined />;\n\n    case \"url_coupons_section\":\n      return <LinkOutlined />;\n\n    case \"help_page\":\n      return <MedicineBoxOutlined />;\n\n    case \"license_page\":\n      return <ApiOutlined />;\n\n    case \"premium_upgrade\":\n      return <StarOutlined />;\n\n    case \"loyalty_program_section\":\n    case \"loyalty_program\":\n      return <RocketOutlined />;\n  }\n\n  return null;\n};\n\nexport default MenuIcon;\n\n// #endregion [Component]\n","// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var location: any;\n\n// #endregion [Variables]\n\nexport const getPathPrefix = function () {\n  return acfwAdminApp.admin_url.replace(location.origin, \"\");\n};\n\nexport const validateURL = (str: string) => {\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n    \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n    \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n    \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n    \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!pattern.test(str);\n};\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Skeleton, Menu } from \"antd\";\n\n// Actions\nimport { PageActions } from \"../../store/actions/page\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\n\n// SCSS\nimport \"./index.scss\";\n\n// Components\nimport MenuIcon from \"./icons\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { setStorePage } = PageActions;\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IActions {\n    setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n    sections: ISection[];\n    currentSection: string|null;\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingsNav = (props: IProps) => {\n\n    const { sections , currentSection, actions } = props;\n    const { app_pages } = acfwAdminApp;\n    const defaultKey: string = currentSection ? currentSection : \"general_section\";\n    const history = useHistory();\n\n    if ( sections.length < 1 ) {\n        return (\n            <div className=\"settings-nav-skeleton\">\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n            </div>\n        )\n    }\n\n    const handleMenuClick = (id: string) => {\n        history.push(`${ pathPrefix }admin.php?page=${id}`);\n        actions.setStorePage({ data: id });\n    }\n\n    const filteredSections = sections.filter( ({show}) => show );\n\n    return (\n        <Menu\n            className=\"acfw-settings-nav\"\n            defaultSelectedKeys={[defaultKey]}\n        >\n            { filteredSections.map( ({ id , title }) => (\n                <Menu.Item key={ id }>\n                    <Link to={ `${ pathPrefix }admin.php?page=acfw-settings&section=${id}` }>\n                        <MenuIcon section={ id } />\n                        { title }\n                    </Link>\n                </Menu.Item>\n            ) ) }\n\n            { app_pages\n              .filter( ({slug}: any) => slug !== 'acfw-settings' && slug !== 'acfw-about' )\n              .map(({ slug, label, page }: any) => (\n                <Menu.Item \n                    key={ page }\n                    className={ page }\n                >\n                    <button \n                        className=\"buttonlink\"\n                        onClick={ () => handleMenuClick( slug ) }\n                    >\n                        <MenuIcon section={ page } />\n                        { label }\n                    </button>\n                </Menu.Item>\n            ) ) }\n\n        </Menu>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ setStorePage }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsNav);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, {createContext, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport { Modal, Button } from \"antd\";\nimport {LockFilled} from \"@ant-design/icons\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// SCSS\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IModalData {\n  title: string;\n  content: string[];\n  buttonTxt: string;\n}\n\ninterface IModalProps {\n  data: IModalData;\n  showModal: boolean;\n  setShowModal: any;\n}\n\ninterface IProps {\n  children: any;\n}\n\n// #endregion [Interfaces]\n\n// #region [Contexts] =================================================================================================\n\nexport const UpsellContext = createContext({showModal: false, setShowModal: (value: boolean) => {}});\n\n// #endregion [Contexts]\n\n// #region [Component] =================================================================================================\n\nconst UpsellModal = (props: IModalProps) => {\n  const {data: {title, content, buttonTxt}, showModal, setShowModal} = props;\n  const history = useHistory();\n  const pathPrefix = getPathPrefix();\n\n  const redirectToPremium = () => {\n    history.push(`${ pathPrefix }admin.php?page=acfw-premium`);\n  };\n\n  return (\n    <Modal \n      className=\"acfw-upsell-modal\"\n      centered\n      width={600}\n      visible={showModal}\n      onCancel={() => setShowModal(false)}\n      footer={null}\n    >\n      <LockFilled />\n      <h2>{title}</h2>\n      {content.map((text: string) => <p>{text}</p>)}\n      <Button type=\"primary\" onClick={redirectToPremium}>{buttonTxt}</Button>\n    </Modal>\n  );\n}\n\nconst UpsellProvider = (props: IProps) => {\n\n  const {children} = props;\n  const [showModal, setShowModal]: [boolean, any] = useState(false);\n\n  return (\n    <UpsellContext.Provider value={{showModal,setShowModal}}>\n      {children}\n      {acfwAdminApp?.upsellModal ? \n        <UpsellModal \n          data={acfwAdminApp?.upsellModal} \n          showModal={showModal} \n          setShowModal={setShowModal} \n        />\n      : null}\n    </UpsellContext.Provider>\n  );\n}\n\nexport default UpsellProvider;\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useContext } from \"react\";\nimport { Switch } from \"antd\";\n\n\n// Contexts\nimport {UpsellContext} from \"../../UpsellProvider\";\n\n// Types\nimport { ISectionField } from \"../../../types/section\";\nimport { isNull } from \"lodash\";\n\n\n// #endregion [Imports]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n  field: ISectionField;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst PremiumModule = (props: IProps) => {\n\n  const { id } = props.field;\n  const context = useContext(UpsellContext);\n\n  return <Switch \n  key={ id }\n  checked={false} \n  defaultChecked={false} \n  onChange={ () => context.setShowModal(true) } \n/>\n}\n\nexport default PremiumModule\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useState } from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Input, Switch, Select, message } from \"antd\";\n\n// Components\nimport PremiumModule from \"./PremiumModule\";\n\n// Types\nimport { IStore } from \"../../../types/store\";\nimport { ISectionField } from \"../../../types/section\";\n\n// Actions\nimport { SettingActions } from \"../../../store/actions/setting\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var acfwpElements: any;\n\nconst { updateSetting, setStoreSettingItem } = SettingActions;\nconst { action_notices } = acfwAdminApp;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IActions {\n    updateSetting: typeof updateSetting;\n    setStoreSettingItem: typeof setStoreSettingItem;\n}\n\ninterface IProps {\n    field: ISectionField;\n    setShowSpinner: any;\n    validateInput: any;\n    value: any;\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst InputSwitch = (props: IProps) => {\n\n    const { field, setShowSpinner, validateInput, value: savedValue, actions } = props;\n    const { id, type, placeholder, default: defaultValue } = field;\n    const [saveTimeout, setSaveTimeout]: [any, any] = useState(null);\n    const value = savedValue !== undefined && savedValue !== false ? savedValue : defaultValue;\n\n    const handleValueChange = (inputValue: unknown, needTimeout: boolean = false ) => {\n\n        const updateValue = () => {\n\n            // validate value\n            if ( ! validateInput( inputValue ) ) return;\n\n            // set state early to prevent rerenders.\n            actions.setStoreSettingItem({ data: {id: id, value: inputValue} });\n\n            // update setting value via api\n            actions.updateSetting({ \n                data: {id: id, value: inputValue, type: type},\n                processingCB: () => setShowSpinner(true),\n                successCB: () => {\n                    message.success(<><strong>{field.title}</strong> {action_notices.success}</>);\n                    setShowSpinner(false);\n                },\n                failCB: () => {\n                    message.error(<><strong>{field.title}</strong> {action_notices.fail}</>);\n                    setShowSpinner(false);\n                },\n            });\n        };\n\n        // we add timeout for fields that requires users to update value by typing.\n        if ( needTimeout ) {\n\n            // clear timeout when user is still editing\n            if ( saveTimeout ) {\n                clearTimeout( saveTimeout );\n                setSaveTimeout( null );\n            }\n\n            // set 1 second delay before updating value.\n            setSaveTimeout( setTimeout( updateValue , 1000 ) );\n\n        } else\n            updateValue();        \n    }\n    \n    if ( \"checkbox\" === type || \"module\" === type ) {\n        return <Switch \n            key={ id }\n            checked={ value === \"yes\" } \n            defaultChecked={ value === \"yes\" } \n            onChange={ inputValue => handleValueChange(inputValue ? \"yes\" : \"\") } \n        />;\n    }\n\n    if ( \"premiummodule\" === type) {\n        return <PremiumModule field={field} />\n    }\n\n    if ( \"textarea\" === type ) {\n        return <Input.TextArea \n            key={ id }\n            rows={3} \n            placeholder={ placeholder } \n            defaultValue={ value } \n            onChange={ (event) => handleValueChange( event.target.value , true ) }\n        />;\n    }\n\n    if ( \"select\" === type ) {\n        const { options } = field;\n        return (\n            <Select \n                key={ id } \n                defaultValue={ value.toString() }\n                style={ { width: `50%` } }\n                placeholder={ placeholder } \n                onSelect={ inputvalue => handleValueChange( inputvalue ) }\n            >\n                { options ? options.map( ({key, label}) => <Select.Option key={ key.toString() } value={ key.toString() }>{ label }</Select.Option> ) : null }\n            </Select>\n        );\n    }\n\n    if ( [ \"text\", \"url\", \"number\" ].indexOf( type ) > -1 )\n        return <Input \n            key={ id }\n            type={ type } \n            name={ id } \n            placeholder={ placeholder } \n            defaultValue={ value } \n            onChange={ event => handleValueChange( event.target.value, true ) }\n        />;\n\n    if ( \"price\" === type )\n        return <Input \n                type=\"text\" \n                className=\"wc_input_price\"\n                name={ id } \n                placeholder={ placeholder } \n                defaultValue={ value } \n                onChange={ (event: any) => handleValueChange( event.target.value, true ) }\n            />;\n   \n    if (\"acfwflicense\" === type) {\n        const {licenseContent} = field;\n        return (\n            <div className=\"acfw-license-field\">\n                {licenseContent?.map((text) => <p dangerouslySetInnerHTML={{__html: text}} />)}\n            </div>\n        );\n    }\n\n    return null;\n};\n\nconst mapStateToProps = (store: IStore, props: any) => {\n\n    const { id } = props.field;\n    const index = store.settingValues.findIndex((i: any) => i.id === id );\n    const value = index > -1 ? store.settingValues[index].value : '';\n    \n    return { value: value };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ updateSetting, setStoreSettingItem }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputSwitch);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useState } from \"react\";\nimport { Typography, Spin, Row, Col, Divider, Popover, Tag } from \"antd\";\nimport { QuestionCircleOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { validateURL } from \"../../../helpers/utils\";\n\n// Styles\nimport \"./index.scss\";\n\n// Components\nimport InputSwitch from \"./InputSwitch\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var wp: any;\ndeclare var acfwAdminApp: any;\nconst { Text } = Typography;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n  field: any;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingField = (props: IProps) => {\n  const { field } = props;\n  const { id, title, type, desc, desc_tip } = field;\n  const { validation } = acfwAdminApp;\n  const [showSpinner, setShowSpinner]: [boolean, any] = useState(false);\n  const [invalidInput, setInvalidInput]: [boolean, any] = useState(false);\n\n  const tooltip = desc_tip ? (\n    <div className=\"setting-tooltip-content\">{desc_tip}</div>\n  ) : null;\n\n  // section title\n  if (\"title\" === type) {\n    return (\n      <div className=\"form-heading\">\n        <h1>{title}</h1>\n        <p>{desc}</p>\n      </div>\n    );\n  }\n\n  // dyk notice\n  if ( \"notice\" === type && field?.noticeData) {\n    const {classname, title: noticeTitle, description, button_text, button_link, button_class } = field?.noticeData;\n    return (\n      <p className={`acfw-dyk-notice ${classname}`}>\n        <span className=\"title\">{noticeTitle}</span><br />\n        <span className=\"text\">{description}</span>\n        {button_text && button_link ? (\n          <a\n            className={`acfw-button ${button_class}`}\n            href={button_link}\n            rel=\"norefer noopener\"\n            target=\"_blank\"\n          >\n            {button_text}\n          </a>\n        ) : null}\n      </p>\n    );\n  }\n  \n  // return empty\n  if (\"sectionend\" === type) return null;\n\n  const validateInput = (value: unknown) => {\n    // validate url value.\n    if (value && type === \"url\" && !validateURL(value + \"\")) {\n      setInvalidInput(true);\n      return false;\n    }\n\n    setInvalidInput(false);\n    return true;\n  };\n\n  return (\n    <Row gutter={16} className=\"form-control\" id={`${id}_field`} key={id}>\n      <Divider />\n      <Col span={8} className=\"setting-title-column\">\n        <label>\n          <strong>{title}</strong>\n          {'premiummodule' === type ? (\n          <>\n            <br />\n            <Tag className=\"premium-tag\">Premium</Tag>\n          </>\n          ) : null}\n        </label>\n        {desc_tip ? (\n          <Popover placement=\"right\" content={tooltip} trigger=\"click\">\n            <QuestionCircleOutlined className=\"setting-tooltip-icon\" />\n          </Popover>\n        ) : null}\n      </Col>\n      <Col className=\"setting-field-column\" span={16}>\n        <InputSwitch\n          field={field}\n          setShowSpinner={setShowSpinner}\n          validateInput={validateInput}\n        />\n        {showSpinner ? (\n          <Spin indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\n        ) : null}\n        <div className={`invalid-input${invalidInput ? \" show\" : \"\"}`}>\n          {invalidInput ? (\n            <Text type=\"danger\">\n              {validation[type] ? validation[type] : validation.default}\n            </Text>\n          ) : null}\n        </div>\n        {desc ? (\n          <p>\n            <Text>{desc}</Text>\n          </p>\n        ) : null}\n      </Col>\n    </Row>\n  );\n};\n\nexport default SettingField;\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Tag, Button } from \"antd\";\nimport { BulbFilled } from \"@ant-design/icons\";\n\n// CSS\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] ================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n    className?: string;\n    showSubtitle?: boolean;\n    showTag?: boolean;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] ================================================================================================\n\nconst FreeGuide = (props: IProps) => {\n\n    const { className, showSubtitle, showTag } = props;\n\n    const { free_guide: {\n        tag,\n        title,\n        subtitle,\n        content,\n        image,\n        button,\n        list\n    } } = acfwAdminApp;\n\n    return (\n        <div className={`coupons-free-guide ${ className }`}>\n            <div className=\"inner\">\n                { showTag ? <Tag color=\"#1693A7\">{ tag }</Tag> : null }\n                <h2>{ title }</h2>\n                <img src={ image } alt={ title } />\n                { showSubtitle ? <h3>{ subtitle }</h3> : null }\n                <p dangerouslySetInnerHTML={{ __html: content }} />\n                <ul>\n                    { list.map( (list_text: string, index: number) => (\n                        <li key={ index }>\n                            <BulbFilled />\n                            { list_text }\n                        </li>\n                    ) ) }\n                </ul>\n                <p>\n                    <Button\n                        type=\"link\"\n                        className=\"cta\"\n                        href={ showSubtitle ? button.help_link : button.link }\n                        target=\"_blank\"\n                        size=\"large\"\n                    >\n                        { button.text }\n                    </Button>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nFreeGuide.defaultProps = {\n    className: '',\n    showSubtitle: false,\n    showTag: true,\n};\n\nexport default FreeGuide;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Skeleton, Divider } from \"antd\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\nimport { ISettingValue } from \"../../types/settings\";\n\n// Components\nimport SettingField from \"./SettingField\";\nimport FreeGuide from \"../FreeGuide\";\nimport UpsellProvider from \"../UpsellProvider\";\n\n// #endregion [Imports]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n    sections: ISection[];\n    settingValues: ISettingValue[]\n    currentSection: string|null;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingsForm = (props: IProps) => {\n\n    const { sections, settingValues, currentSection } = props;\n\n    const idx           = currentSection ? sections.findIndex(i => i.id === currentSection ) : 0;\n    const sectionID     = sections.length ? sections[idx].id : '';\n    const sectionFields = sections.length ? sections[idx].fields : [];\n\n    if ( sectionFields.length < 1 || settingValues.length < 1 ) {\n        return (\n            <>\n                <Skeleton loading={true} active paragraph={{ rows: 1 }} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n            </>\n        )\n    }\n\n    return (\n        <UpsellProvider>\n            <div className={`settings-form ${sectionID}-form`}>\n                { sectionFields.map( field => <SettingField key={ field.id } field={ field } /> ) }\n\n                { ! currentSection || \"general_section\" === currentSection ? (\n                    <>\n                        <Divider />\n                        <FreeGuide />\n                    </>\n                ) : null }\n            </div>\n        </UpsellProvider>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections, settingValues: store.settingValues });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({}, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsForm);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport {useHistory } from \"react-router-dom\";\n\n// SCSS\nimport \"./index.scss\";\n\n// Actions\nimport { PageActions } from \"../../store/actions/page\";\n\n// Types\nimport { IStore } from \"../../types/store\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { setStorePage } = PageActions;\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n  setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n  actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst Logo = (props: IProps) => {\n\n  const {actions} = props;\n  const {app_pages} = acfwAdminApp;\n  const history = useHistory();\n  const [premiumPage] = app_pages.filter((p: any) => 'acfw-premium' === p.slug );\n\n  const handleUpgradeClick = () => {\n    history.push(`${ pathPrefix }admin.php?page=acfw-premium`);\n    actions.setStorePage({ data: 'acfw-premium' });\n  };\n\n\n  return (\n    <div className=\"acfw-logo-div\">\n      <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n      {premiumPage ? (\n        <button \n          className=\"acfw-header-upgrade-btn\"\n          onClick={() => handleUpgradeClick()}\n        >\n          Upgrade\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ setStorePage }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logo);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"antd\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\n\n// Actions\nimport { SectionActions } from \"../../store/actions/section\";\n\n// Components\nimport SettingsNav from \"../../components/SettingsNav\";\nimport SettingsForm from \"../../components/SettingsForm\";\nimport Logo from \"../../components/Logo\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\nconst { readSections, readSection } = SectionActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readSections: typeof readSections;\n    readSection: typeof readSection;\n}\n\ninterface IProps {\n    sections: ISection[];\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst Settings = (props: IProps) => {\n\n    const { sections , actions } = props;\n\n    const urlParams = new URLSearchParams(useLocation().search);\n    const currentSection = urlParams.get(\"section\");\n\n    // fetch all sections on first load.\n    useEffect(() => {\n\n        if ( sections.length > 0 ) return;\n\n        actions.readSections({ id: currentSection });\n\n    }, [actions]);\n\n    // fetch fields of current section.\n    useEffect(() => {\n\n        if ( sections.length < 1 ) return;\n\n        const idx = currentSection ? sections.findIndex(i => i.id === currentSection ) : 0;\n\n        if ( sections[idx].fields.length < 1 )\n            actions.readSection({ id: currentSection });\n\n    }, [sections, actions, currentSection]);\n\n    return (\n    <>\n        <div className=\"page-header settings-header\">\n            <Logo />\n            <h1>{ acfwAdminApp.title }</h1>\n            <p>{ acfwAdminApp.desc }</p>\n        </div>\n        <Row className=\"settings-content\">\n            <Col span={6}>\n                <SettingsNav currentSection={ currentSection } />\n            </Col>\n            <Col span={18} className=\"content-column\">\n                <SettingsForm currentSection={ currentSection } />\n            </Col>\n        </Row>\n    </>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ readSections , readSection }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\n\n// Styles\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\nconst License = () => {\n\n    const { license_page: { \n        title, \n        desc, \n        feature_comparison, \n        license_status, \n        content, \n        specs\n    } } = acfwAdminApp;\n\n    return (\n        <div id=\"license-placeholder\">\n            <div className=\"overview\">\n                <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n                <a \n                    className=\"action-button feature-comparison\" \n                    href={ feature_comparison.link } \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    { feature_comparison.text }\n                </a>\n            </div>\n            <div className=\"license-info\">\n\n                <div className=\"heading\">\n                    <div className=\"left\">\n                        <span>{ license_status.label }</span>\n                    </div>\n                    <div className=\"right\">\n                        <a \n                            className=\"action-button upgrade-premium\" \n                            href={ license_status.link }\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            >\n                            { license_status.text }\n                        </a>\n                    </div>\n                </div>\n\n                <div className=\"content\">\n                    <h2>{ content.title }</h2>\n                    <p>{ content.text }</p>\n\n                    <table className=\"license-specs\">\n                        <thead>\n                            <tr>\n                                { specs.map( (s: any) => (<th key={ s.label }>{ s.label }</th>) ) }\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                { specs.map( (s: any) => (<td key={ s.value }>{ s.value }</td>) ) }\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default License;\n\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Row, Col, Card, Button, Avatar } from \"antd\";\n\n// CSS\nimport \"./index.scss\";\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IAboutCard {\n    icon: string;\n    title: string;\n    content: string;\n    action: IAboutAction;\n}\n\ninterface IAboutAction {\n    status: string;\n    link: string;\n    external: boolean\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst About = () => {\n\n    const { about_page : {\n        title,\n        desc,\n        main_card,\n        cards,\n        status,\n        status_texts,\n        button_texts\n    } } = acfwAdminApp;\n\n    return (\n        <div className=\"about-page\">\n            <div className=\"page-header about-header\">\n                <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n            </div>\n            <Row className=\"about-rymera-team\">\n                <Col className=\"content\" span={12}>\n                    <div className=\"inner\">\n                        <h2>{ main_card.title }</h2>\n                        { main_card.content.map( (text: string, key: number) => <p key={ key }>{ text }</p> ) }\n                    </div>\n                </Col>\n                <Col className=\"photo\" span={12}>\n                    <img src={ main_card.image } alt=\"Rymera Team\" />\n                </Col>\n            </Row>\n            <Row className=\"plugin-cards\" gutter={10}>\n                { cards.map( (card: IAboutCard, key: number) => (\n                    <Col  key={ key } span={12}>\n                        <Card\n                            actions={[\n                                (\n                                    <>\n                                        <strong>{ status }: </strong> \n                                        <span>{ status_texts[ card.action.status ] }</span>\n                                    </>\n                                ),\n                                card.action.link ? (\n                                    <Button \n                                        type=\"primary\" \n                                        href={ card.action.link } \n                                        target={ card.action.external ? `_blank` : undefined }\n                                    >\n                                        { button_texts[ card.action.status ] }\n                                    </Button>\n                                ) : null\n                            ]}\n                        >\n                            <Card.Meta \n                                avatar={ <Avatar src={ card.icon } /> }\n                                title={ card.title }\n                                description={ card.content }\n                            />\n                        </Card>\n                    </Col>\n                ) ) }\n            </Row>\n        </div>\n    );\n}\n\nexport default About;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Typography } from \"antd\";\n\n// Styles\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { Text, Link } = Typography;\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\nconst Premium = () => {\n\n    const { premium_page: {\n        image,\n        title, \n        desc, \n        header, \n        rows, \n        action\n    }, logo_alt } = acfwAdminApp;\n\n    return (\n        <div id=\"acfw-premium\" className=\"acfwf-upgrade-settings-block\">\n\n            <p><img className=\"logo\" src={ image } alt={ logo_alt } /></p>\n            <h2 dangerouslySetInnerHTML={{ __html: title }} />\n            <p><Text>{ desc }</Text></p>\n\n            <div className=\"responsive-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th className=\"feature\">\n                                <Text>{ header.feature }</Text>\n                            </th>\n                            <th className=\"free\">\n                                <Text>{ header.free }</Text>\n                            </th>\n                            <th className=\"premium\">\n                                <Text>{ header.premium }</Text>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { rows.map( ({feature, free, premium}: any, key: number) => (\n                            <tr key={ key }>\n                                <td className=\"feature\">\n                                    <Text>{ feature }</Text>\n                                </td>\n                                <td className=\"free dashicons-before dashicons-no\">\n                                    <Text>{ free }</Text>\n                                </td>\n                                <td className=\"premium dashicons-before dashicons-yes-alt\">\n                                    <Text>{ premium }</Text>\n                                </td>\n                            </tr>\n                        ) ) }\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"cta-block\">\n                <h3><Text>{ action.title }</Text></h3>\n                <p>\n                    <Link className=\"acfw-upgrade-button\" href={ action.btn_link } target=\"_blank\">{ action.btn_text }</Link>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Premium;\n\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Row, Col, Card, Button } from \"antd\";\n\n// CSS\nimport \"./index.scss\";\n\n// Components\nimport Logo from \"../../components/Logo\";\nimport FreeGuide from \"../../components/FreeGuide\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var acfwpElements: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IHelpCard {\n    title: string;\n    content: string;\n    action: IHelpCardAction\n}\n\ninterface IHelpCardAction {\n    link: string;\n    text: string;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst Help = () => {\n\n    const { help_page: {\n        title,\n        desc,\n        cards\n    }} = acfwAdminApp;\n\n    const { HelpPremium } = acfwpElements;\n\n    return (\n        <div className=\"help-page\">\n            <div className=\"page-header help-header\">\n                <Logo />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n            </div>\n            <Row gutter={10}>\n                { cards.map( (card: IHelpCard, key: number) => (\n                    <Col key={key} className=\"acfw-border-box\" span={12}>\n                        <Card>\n                        <h2>{ card.title }</h2>\n                        <p>{ card.content }</p>\n                        <Button \n                            type=\"primary\" \n                            href={ card.action.link }\n                            size=\"large\"\n                            target=\"_blank\"\n                        >\n                            { card.action.text }\n                        </Button>\n                        </Card>\n                    </Col>\n                ) ) }\n            </Row>\n            <Row gutter={10}>\n                <Col className=\"acfw-border-box\" span={24}>\n                    <FreeGuide className=\"help-guide\" showSubtitle={true} showTag={false} />\n                </Col>\n            </Row>\n            { HelpPremium ? <HelpPremium /> : null }\n        </div>\n    );\n};\n\nexport default Help;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\n// Pages\nimport Settings from \"./Settings\";\nimport License from \"./License\";\nimport About from \"./About\";\nimport PremiumUpsell from \"./Premium\";\nimport Help from \"./Help\";\n\n// Actions\nimport { PageActions } from \"../store/actions/page\";\n\n// Types\nimport { IStore } from \"../types/store\";\n\n// Helpers\nimport axiosInstance from \"../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwpElements: any;\n\nconst { LicensePremium } = acfwpElements;\nconst is_acfwp_active = parseInt(acfwpElements.is_acfwp_active);\nconst { setStorePage } = PageActions;\n\nacfwpElements.axiosInstance = axiosInstance;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n  setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n  page: string;\n  actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst App = (props: IProps) => {\n  const { page, actions } = props;\n\n  const urlParams = new URLSearchParams(useLocation().search);\n  const appPage = urlParams.get(\"page\");\n\n  acfwpElements.appPage = appPage;\n\n  useEffect(() => {\n    actions.setStorePage({ data: appPage ? appPage : \"\" });\n  }, [appPage, actions]);\n\n  return (\n    <div className=\"app\">\n      {page === \"acfw-settings\" ? <Settings /> : null}\n\n      {page === \"acfw-license\" && is_acfwp_active ? <LicensePremium /> : null}\n\n      {page === \"acfw-license\" && !is_acfwp_active ? <License /> : null}\n\n      {page === \"acfw-premium\" ? <PremiumUpsell /> : null}\n\n      {page === \"acfw-help\" ? <Help /> : null}\n\n      {page === \"acfw-about\" ? <About /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (store: IStore) => ({ page: store.page });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators({ setStorePage }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { PageActions } from \"../../store/actions/page\";\n\n// Types\nimport { IStore } from \"../../types/store\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// SCSS\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { setStorePage } = PageActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n  setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n  page: string;\n  actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst CouponsNav = (props: IProps) => {\n  const { page, actions } = props;\n  const history = useHistory();\n  const pathPrefix = getPathPrefix();\n\n  const {\n    coupon_nav: { toplevel, links },\n    app_pages,\n  } = acfwAdminApp;\n\n  const handleMenuClick = (id: string) => {\n    history.push(`${pathPrefix}admin.php?page=${id}`);\n    actions.setStorePage({ data: id });\n  };\n\n  return (\n    <>\n      <a\n        href={`${pathPrefix}edit.php?post_type=shop_coupon`}\n        className=\"wp-has-submenu wp-has-current-submenu wp-menu-open menu-top toplevel_page_acfw-admin\"\n        aria-haspopup=\"false\"\n      >\n        <div className=\"wp-menu-arrow\">\n          <div></div>\n        </div>\n        <div className=\"wp-menu-image dashicons-before dashicons-tickets-alt\">\n          <br />\n        </div>\n        <div className=\"wp-menu-name\">{toplevel}</div>\n      </a>\n      <ul className=\"wp-submenu wp-submenu-wrap\">\n        <li className=\"wp-submenu-head\" aria-hidden=\"true\">\n          {toplevel}\n        </li>\n        {links.map(({ link, text }: any, key: number) => (\n          <li key={key} className={key === 0 ? \"wp-first-item\" : \"\"}>\n            <a href={link}>{text}</a>\n          </li>\n        ))}\n        {app_pages.map(({ slug, label }: any) => (\n          <li key={slug} className={slug === page ? `current` : \"\"}>\n            <button\n              className={`buttonlink ${slug}-link`}\n              onClick={() => handleMenuClick(slug)}\n            >\n              {label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst mapStateToProps = (store: IStore) => ({ page: store.page });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators({ setStorePage }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CouponsNav);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {\n  BrowserRouter,\n  Route,\n  useLocation,\n  useHistory,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport * as antd from \"antd\";\nimport * as antdIcons from \"@ant-design/icons\";\nimport {\n  bindActionCreators,\n  createStore,\n  combineReducers,\n  applyMiddleware,\n} from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as lodash from \"lodash\";\nimport moment from \"moment\";\n\n// Store\nimport initializeStore from \"./store\";\n\n// CSS\nimport \"antd/dist/antd.css\";\nimport \"./index.scss\";\n\n// Pages\nimport App from \"./pages/App\";\n\n// Components\nimport CouponsNav from \"./components/CouponsNav\";\n\n// Helpers\n// import axiosInstance from \"./helpers/axios\";\nimport { getPathPrefix, validateURL } from \"./helpers/utils\";\n\n// Actions\nimport { PageActions } from \"./store/actions/page\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwpElements: any;\n\nconst pathPrefix = getPathPrefix();\n\n// Initialize redux store.\nconst store = initializeStore();\n\n// if ACFWP is active, then we export our React instance and other required packages.\nconst exports = {\n  element: React,\n  dom: ReactDOM,\n  router: { BrowserRouter, Route, useLocation, useHistory, Link, Redirect },\n  redux: {\n    bindActionCreators,\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    createSagaMiddleware,\n    connect,\n    sagaEffects: { all, put, call, takeEvery },\n  },\n  lodash,\n  antd,\n  antdIcons,\n  moment,\n  // axiosInstance,\n  pathPrefix,\n  validateURL,\n  appStore: {\n    Provider: Provider,\n    store: store,\n    storeActions: { ...PageActions },\n  },\n};\n\nacfwpElements = {\n  ...acfwpElements,\n  ...exports,\n};\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\n// Render main app.\ndocument.querySelectorAll(\"#acfw_admin_app\").forEach((domContainer: any) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path={`${pathPrefix}admin.php`} component={App} />\n      </BrowserRouter>\n    </Provider>,\n    domContainer\n  );\n});\n\n// Replace Advanced Coupons navigation in WP admin sidebar with a React app equivalent.\ndocument\n  .querySelectorAll(\"#toplevel_page_acfw-admin\")\n  .forEach((domContainer: any) => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <BrowserRouter>\n          <Route path={`${pathPrefix}admin.php`} component={CouponsNav} />\n        </BrowserRouter>\n      </Provider>,\n      domContainer\n    );\n  });\n\n// #endregion [Component]\n"],"sourceRoot":""}